#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main(){
    pid_t pid;
    pid = fork();
    if(pid < 0){
        perror("Fork failed");
        return 1;
    }
    else if(pid == 0){
        printf("Child Process:\n");
        printf("PID: %d\n", getpid());
        printf("PPID: %d\n", getppid());
    }
    else{
        printf("Parent Process\n");
        printf("PID %d\n", getpid());
        printf("Child PID %d\n", pid);
    }
    return 0;
}




nano fork.c
gcc fork.c -o fork
./fork

















BANKER:

#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int n = 5, m = 3;

int available[MAX_RESOURCES] = {4, 2, 3};

int max[MAX_PROCESSES][MAX_RESOURCES] = {
    {6, 4, 3},
    {1, 2, 2},
    {5, 3, 3},
    {3, 3, 2},
    {4, 2, 2}
};

int allocation[MAX_PROCESSES][MAX_RESOURCES] = {
    {2, 1, 1},
    {1, 0, 1},
    {2, 1, 1},
    {0, 1, 0},
    {1, 0, 1}
};


int need[MAX_PROCESSES][MAX_RESOURCES];

void calculateNeed() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

bool isSafe() {
    int work[MAX_RESOURCES];
    bool finish[MAX_PROCESSES] = {false};
    int safeSeq[MAX_PROCESSES];
    int idx = 0;

    for (int i = 0; i < m; i++) {
        work[i] = available[i];
    }

    int count = 0;
    while (count < n) {
        bool found = false;
        for (int i = 0; i < n; i++) {
            if (!finish[i]) {
                bool possible = true;
                for (int j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        possible = false;
                        break;
                    }
                }
                if (possible) {
                    for (int j = 0; j < m; j++) {
                        work[j] += allocation[i][j];
                    }
                    safeSeq[idx++] = i;
                    finish[i] = true;
                    count++;
                    found = true;
                }
            }
        }
        if (!found) {
            return false;
        }
    }

    printf("System is in a safe state.\nSafe sequence: ");
    for (int i = 0; i < n; i++) {
        printf("P%d", safeSeq[i]);
        if (i != n - 1) printf(" -> ");
    }
    printf("\n");
    return true;
}

int main() {
    calculateNeed();
    if (!isSafe()) {
        printf("System is in an unsafe state!\n");
    }
    return 0;
}




FIFO:

#include <stdio.h>

#define MAX_FRAMES 10  
#define MAX_PAGES 100  

void fifoPageReplacement(int pages[], int n, int frames) {
    int frameQueue[MAX_FRAMES];  
    int front = 0, rear = 0;     
    int count = 0;              
    int pageFaults = 0;        
    int pageHits = 0;            

    for (int i = 0; i < frames; i++) 
        frameQueue[i] = -1; 

    printf("\nPage Reference String  | Frames    | Page Hits/Faults\n");
    printf("---------------------------------------------\n");

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0; 

       
        for (int j = 0; j < frames; j++) {
            if (frameQueue[j] == page) {
                found = 1;
                break;
            }
        }

        
        if (!found) {
            pageFaults++;

            if (count < frames) {
                frameQueue[rear] = page;
                rear = (rear + 1) % frames;
                count++;
            } else {
                frameQueue[front] = page;  
                front = (front + 1) % frames; 
            }
            printf("%4d                  |", page);
            for (int j = 0; j < frames; j++) {
                if (frameQueue[j] != -1)
                    printf(" %d", frameQueue[j]);
                else
                    printf(" -");
            }
            printf("  | Page Fault\n");
        } else {
            pageHits++;
            printf("%4d                  |", page);
            for (int j = 0; j < frames; j++) {
                if (frameQueue[j] != -1)
                    printf(" %d", frameQueue[j]);
                else
                    printf(" -");
            }
            printf("  | Page Hit\n");
        }
    }

    printf("\nTotal Page Faults: %d\n", pageFaults);
    printf("Total Page Hits: %d\n", pageHits);
}

int main() {
    int pages[MAX_PAGES], n, frames;

    printf("Enter the number of pages: ");
    scanf("%d", &n);

    printf("Enter the reference string: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &pages[i]);

    printf("Enter the number of frames: ");
    scanf("%d", &frames);

    fifoPageReplacement(pages, n, frames);

    return 0;
}














FCFS:

#include <stdio.h>
#include <stdlib.h>

void fcfsDiskScheduling(int requests[], int n, int head) {
    int totalSeekTime = 0, i;

    printf("\nSequence of disk accesses:\n");
    printf("%d", head);

    for (i = 0; i < n; i++) {
        int seekDistance = abs(requests[i] - head);
        totalSeekTime += seekDistance;
        head = requests[i];
        printf(" -> %d", head);
    }

    printf("\n\nTotal Seek Time: %d\n", totalSeekTime);
    printf("Average Seek Time: %.2f\n", (float)totalSeekTime / n);
}

int main() {
    int n, head, i;
    int *requests;

    printf("Enter the number of disk requests: ");
    scanf("%d", &n);

    if (n <= 0) {
        printf("Error: Invalid number of requests.\n");
        return 1;
    }

    requests = (int *)malloc(n * sizeof(int)); 

    if (requests == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    printf("Enter the disk request queue: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    fcfsDiskScheduling(requests, n, head);

    free(requests);

    return 0;
}
